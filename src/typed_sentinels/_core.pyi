from collections.abc import Callable
from threading import Lock
from typing import (
    Any,
    ClassVar,
    Generic,
    NoReturn,
    SupportsIndex,
    TypeGuard,
    TypeVar,
    final,
    overload,
)
from weakref import WeakValueDictionary

_T = TypeVar('_T')

@final
class Sentinel(Generic[_T]):  # noqa: UP046
    _cls_cache: ClassVar[WeakValueDictionary[tuple[str, Any], Sentinel[Any]]] = ...
    _cls_hint: ClassVar[Any] = ...
    _cls_lock: ClassVar[Lock] = ...
    _hint: Any

    @property
    def hint(self) -> _T: ...

    # Overloads for `__class_getitem__` ----------------------------------------
    @classmethod
    @overload
    def __class_getitem__(cls: type[Sentinel[_T]], hint: type[_T]) -> type[Sentinel[_T]]: ...
    @classmethod
    @overload
    def __class_getitem__(cls, hint: Any) -> Any: ...

    # Overloads for `__new__` --------------------------------------------------
    @overload
    def __new__(cls: type[Sentinel[_T]], /) -> _T: ...
    @overload
    def __new__(cls: type[Sentinel[_T]], hint: type[_T], /) -> _T: ...
    @overload
    def __new__(cls: type[Sentinel[Any]], hint: Any, /) -> Any: ...

    # .
    def __getitem__(self, key: Any) -> _T: ...
    def __call__(self, *args: Any, **kwargs: Any) -> _T: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __copy__(self) -> Sentinel[_T]: ...
    def __deepcopy__(self, memo: Any) -> Sentinel[_T]: ...
    def __reduce__(self) -> tuple[Callable[..., Sentinel[_T]], tuple[_T]]: ...
    def __reduce_ex__(self, protocol: SupportsIndex) -> tuple[Callable[..., Sentinel[_T]], tuple[_T]]: ...
    def __setattr__(self, name: str, value: Any) -> NoReturn: ...
    def __delattr__(self, name: str) -> NoReturn: ...

def is_sentinel(obj: Any, typ: _T | None = None) -> TypeGuard[Sentinel[_T]]: ...  # noqa: UP047
